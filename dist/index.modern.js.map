{"version":3,"file":"index.modern.js","sources":["../src/index.js"],"sourcesContent":["import React, { createContext, useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\n\n/**\n * Context\n * @see https://reactjs.org/docs/context.html\n * @type {React.Context<*>}\n */\nexport const Context = createContext(null)\n\n/**\n * Provider\n * @see https://reactjs.org/docs/context.html#contextconsumer\n * @type {Context.Provider<*>}\n */\nexport const Provider = Context.Provider\n\n/**\n * Consumer\n * @see https://reactjs.org/docs/context.html#contextprovider\n * @type {Context.Provider<*>}\n */\nexport const Consumer = Context.Consumer\n\nconst useComponentDidMount = (onMountHandler) => {\n  useEffect(() => {\n    async function asyncOnMountHandler() {\n      await onMountHandler()\n    }\n    asyncOnMountHandler()\n  }, [])\n}\n\n/**\n * Use this Wrapper or HOC, Higher Order Component, to copy the `config` object found in context\n * onto the properties of the first level of children it encapsulates. Because `contextType` can\n * not be added to JSX functions, you will need to wrap or extend the function to inject the\n * config value. This HOC, simple clones the JSX element, and copies the context's 'config'\n * values as properties.\n *\n * @param {JSX} [children] - Optional JSX Children, keep in mind this only attaches the property\n * to all the first level children ( shallow )\n * @param {String} [propName='config'] - Optionally you can specify a Property to store the\n * config on, the default is 'config'\n * @return {JSX}\n * @example\n * import React from 'react'\n * import { ConfigPropExtenderHoc } from 'react-static-config-loader'\n *\n * const ExampleFunctionalDiv = ({ config, someValue }) => <React.Fragment>\n *  <code>{JSON.stringify(config, null, 4)}</code>\n *  <div>{someValue}</div>\n *  </React.Fragment>\n *\n * const HOCExampleFunctionalDiv = (props) => {\n *   return (\n *     <React.Fragment>\n *       <ConfigPropExtenderHoc>\n *         <ExampleFunctionalDiv {...props} />\n *       </ConfigPropExtenderHoc>\n *     </React.Fragment>\n *   );\n * }\n *\n *  export default HOCExampleFunctionalDiv\n */\nexport class ConfigPropExtenderHoc extends React.Component {\n  static contextType = Context\n  render() {\n    const propName = this.props?.propName || 'config'\n    return React.cloneElement(this.props.children, {\n      [propName]: this.context\n    })\n  }\n}\n\nConfigPropExtenderHoc.propTypes = {\n  children: PropTypes.element.isRequired,\n  propName: PropTypes.string\n}\n\nConfigPropExtenderHoc.defaultProps = {\n  propName: 'config'\n}\n\n/**\n * Callback responsible for fetching the external configuration. Because it is a promise, the\n * user can add a 'then' or even use async/await to transform the payload.\n *\n * @callback loaderCall\n * @return {Promise<any>}\n */\n\n/**\n * StaticConfigWrapper - is everything wrapped up in one JSX tag. I\n * expect this will satisfy the majority of scenarios. However, for those that\n * it does not, the [Provider](#Provider), [Consumer](#Consumer), and [Context](#Context) are all broken out. If you\n * find you really need them, this might not be a good solution for your project.\n * [redux Action object](http://redux.js.org/docs/basics/Actions.html)\n *\n * @param {Object} [props] - props the JSX props.\n * @param {JSX.Element} [props.children=null] - All the JSX children, or null. the default value\n * is null.\n * @param {loaderCall} props.loader - Required function that will \"load\" the static\n * configuration returning a promise. It is assumed the function will return a Promise, that can\n * resolve a value or a proper rejection.\n * @param {JSX.Element} [props.loadingMsg=null] - The optional JSX that will be displayed while the\n * loader is running.\n * @return {JSX.Element}\n * @example\n *  import React from 'react';\n *  import { StaticConfigWrapper, Context } from 'react-static-config-loader';\n *  export class ExampleClass extends React.Component {\n *   static contextType = Context;\n *   render() {\n *     const {someValue} = this.props;\n *     const config = this.context;\n *     return <React.Fragment>\n *       <code>{JSON.stringify(config,null,4)}</code>\n *       <div>{someValue}</div>\n *     </React.Fragment>\n *   }\n *  }\n *  const later = async function later(delay, fnLater) {\n *   return new Promise(function(resolve) {\n *     setTimeout(resolve, delay);\n *   }).then(fnLater);\n *  }\n *  const App = () => {\n *   const fn = ()=> Promise.resolve({msg:'go',version:1234,selection:['no','yes'], buttonName:'go go button'})\n *   return (\n *     <React.Fragment>\n *       <StaticConfigWrapper loader={async () => later(2000, fn)}>\n *         <ExampleClass someValue={'You made it in ExampleClass'}/>\n *       </StaticConfigWrapper>\n *     </React.Fragment>\n *   )\n *  }\n *  export default App\n */\nexport const StaticConfigWrapper = ({ children, loader, loadingMsg }) => {\n  const [config, setConfig] = useState(undefined)\n  const [isLoading, setIsLoading] = useState(true)\n  useComponentDidMount(async () => {\n    try {\n      setIsLoading(true)\n      const data = await loader()\n      setConfig(data)\n    } finally {\n      setIsLoading(false)\n    }\n  })\n  return (\n    <React.Fragment>\n      <Provider value={config}>\n        <Consumer>{(config) => (isLoading ? loadingMsg : children)}</Consumer>\n      </Provider>\n    </React.Fragment>\n  )\n}\n\nStaticConfigWrapper.propTypes = {\n  children: PropTypes.element,\n  loader: PropTypes.func.isRequired,\n  loadingMsg: PropTypes.element\n}\n"],"names":["Context","createContext","Provider","Consumer","useComponentDidMount","onMountHandler","useEffect","asyncOnMountHandler","ConfigPropExtenderHoc","React","Component","render","propName","props","cloneElement","children","context","contextType","propTypes","PropTypes","element","isRequired","string","defaultProps","StaticConfigWrapper","loader","loadingMsg","config","setConfig","useState","undefined","isLoading","setIsLoading","data","func"],"mappings":";;;MAQaA,OAAO,GAAGC,aAAa,CAAC,IAAD;MAOvBC,QAAQ,GAAGF,OAAO,CAACE;MAOnBC,QAAQ,GAAGH,OAAO,CAACG;;AAEhC,MAAMC,oBAAoB,GAAIC,cAAD,IAAoB;AAC/CC,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeC,mBAAf,GAAqC;AACnC,YAAMF,cAAc,EAApB;AACD;;AACDE,IAAAA,mBAAmB;AACpB,GALQ,EAKN,EALM,CAAT;AAMD,CAPD;;AA0CO,MAAMC,qBAAN,SAAoCC,KAAK,CAACC,SAA1C,CAAoD;AAEzDC,EAAAA,MAAM,GAAG;AAAA;;AACP,UAAMC,QAAQ,GAAG,qBAAKC,KAAL,4DAAYD,QAAZ,KAAwB,QAAzC;AACA,WAAOH,KAAK,CAACK,YAAN,CAAmB,KAAKD,KAAL,CAAWE,QAA9B,EAAwC;AAC7C,OAACH,QAAD,GAAY,KAAKI;AAD4B,KAAxC,CAAP;AAGD;;AAPwD;AAA9CR,sBACJS,cAAcjB;AASvBQ,qBAAqB,CAACU,SAAtB,GAAkC;AAChCH,EAAAA,QAAQ,EAAEI,SAAS,CAACC,OAAV,CAAkBC,UADI;AAEhCT,EAAAA,QAAQ,EAAEO,SAAS,CAACG;AAFY,CAAlC;AAKAd,qBAAqB,CAACe,YAAtB,GAAqC;AACnCX,EAAAA,QAAQ,EAAE;AADyB,CAArC;MA2DaY,mBAAmB,GAAG,CAAC;AAAET,EAAAA,QAAF;AAAYU,EAAAA,MAAZ;AAAoBC,EAAAA;AAApB,CAAD,KAAsC;AACvE,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBC,QAAQ,CAACC,SAAD,CAApC;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BH,QAAQ,CAAC,IAAD,CAA1C;AACAzB,EAAAA,oBAAoB,CAAC,YAAY;AAC/B,QAAI;AACF4B,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,YAAMC,IAAI,GAAG,MAAMR,MAAM,EAAzB;AACAG,MAAAA,SAAS,CAACK,IAAD,CAAT;AACD,KAJD,SAIU;AACRD,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GARmB,CAApB;AASA,sBACE,oBAAC,KAAD,CAAO,QAAP,qBACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEL;AAAjB,kBACE,oBAAC,QAAD,QAAYA,MAAD,IAAaI,SAAS,GAAGL,UAAH,GAAgBX,QAAjD,CADF,CADF,CADF;AAOD;AAEDS,mBAAmB,CAACN,SAApB,GAAgC;AAC9BH,EAAAA,QAAQ,EAAEI,SAAS,CAACC,OADU;AAE9BK,EAAAA,MAAM,EAAEN,SAAS,CAACe,IAAV,CAAeb,UAFO;AAG9BK,EAAAA,UAAU,EAAEP,SAAS,CAACC;AAHQ,CAAhC;;;;"}